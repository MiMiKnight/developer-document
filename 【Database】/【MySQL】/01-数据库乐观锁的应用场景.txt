# 数据库乐观锁的应用场景？

## 乐观锁的定义：
乐观锁是一种并发控制机制，用于解决并发情况下的数据一致性问题，就是读不加锁，写的是时候加锁。
在并发环境下，多个进程或线程可能同时读取和修改同一份数据，这时如果不做任何控制，就会导致数据的不一致性；

## 乐观锁实现方式
乐观锁的实现方式主要有以下几种：

1.版本号方式
在数据表中增加一个版本号字段，每次更新数据时将版本号加1，同时将当前版本号作为更新条件，如果当前版本号与更新时的版本号一致，则更新成功，否则更新失败。该方式需要在数据库中使用乐观锁来控制并发操作。

2.时间戳方式
在数据表中增加一个时间戳字段，每次更新数据时将时间戳更新为当前时间戳，同时将当前时间戳作为更新条件，如果当前时间戳与更新时的时间戳一致，则更新成功，否则更新失败。该方式适用于需要精确控制数据更新时间的场景。

3.CAS方式
CAS 是一种原子性操作，可以实现无锁化的并发控制。
CAS 实现操作通常包括三个参数：需要修改的变量 V、旧的期望值 A 和新的值 B。
乐观锁详解(4种乐观锁实现方式原理)-mikechen
在更新数据时，首先获取当前数据的版本号或时间戳，然后与需要更新的版本号或时间戳进行比较。
如果一致，则使用 CAS 操作更新数据，否则更新失败，该方式适用于需要高性能并且并发度较高的场景。
总之，Java中的CAS锁实现原理就是通过CAS操作实现的，相比于传统的锁机制，CAS锁的性能更好，因为它避免了线程阻塞和上下文切换的开销。

4.序列号方式
在数据表中增加一个序列号字段，每次更新数据时将序列号加1，同时将当前序列号作为更新条件，如果当前序列号与更新时的序列号一致，则更新成功，否则更新失败。该方式需要保证序列号的唯一性。

 
## 乐观锁实现原理
乐观锁的实现原理可以分为以下几个步骤：

1.读取数据版本号或时间戳

在更新数据之前，先读取数据的版本号或时间戳等标识符，作为当前数据的状态。

2.更新数据操作

执行更新数据操作时，需要将当前数据的状态与更新时的状态进行比较。

如果一致，则说明当前数据没有被其他线程修改过，可以直接更新。

如果不一致，则说明当前数据已经被其他线程修改，需要进行回滚或者重试操作。

3.版本号或时间戳更新

在更新数据时，需要将数据的版本号或时间戳等标识符进行更新，以标记数据已经被修改过。

4.锁竞争处理

在并发操作时，可能会出现多个线程同时更新同一份数据的情况，此时需要进行锁竞争处理，避免数据的冲突和不一致情况的出现。

 
## 乐观锁使用场景：
乐观锁主要用于并发场景下的数据更新操作，适用于以下场景：

1.高并发的读写操作

在高并发场景下，多个用户同时访问同一份数据时，使用乐观锁可以避免悲观锁的死锁问题，并且不会阻塞其他线程的读取操作，从而提高系统的并发性能。

2.分布式系统的数据同步

在分布式系统中，不同的节点可能同时修改同一份数据，使用乐观锁可以保证数据的一致性，避免数据出现冲突和不一致的情况。

3.多版本数据的更新

在需要维护多个版本的数据时，可以使用乐观锁来实现数据的版本控制，保证每个版本的数据都是正确和一致的。

4.高性能的数据库操作

在需要高性能的数据库操作场景下，使用乐观锁可以减少数据库锁的使用，降低数据库的负载，提高系统的性能。


## 实际应用场景：
线上商品买卖，并发修改库存数量的情况；

## 我的思考：
1、如果不涉及数量的并发修改，一般不需要添加乐观锁；
例如：文章表，同时修改文章标题或者文章内容的操作，不涉及 数量的修改，后置更新覆盖数据不会对业务产生影响；
即前后两次update更新操作没有业务上的前后联系，这种情况就不需要添加乐观锁；
2、数据库使用version乐观锁字段后，不是所有字段的更新都需要使用到version乐观锁；
例如"库存表"中存在stock（库存数量）、name（名称）两个字段，修改name字段时候就不需要where条件中含有version控制并发修改，
但是在修改stock字段时，update语句的where条件中就必须含有version字段用于控制并发；


## 参考文献
https://mikechen.cc/28738.html



